import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException {
        // we expect exactly one argument: the name of the input file
        if (args.length != 1) {
            System.err.println("\n");
            System.err.println("Hardware Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename = args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // deprecated

        // create a lexer/scanner
        hardwareLexer lex = new hardwareLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        hardwareParser parser = new hardwareParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Circuit ast = (Circuit) interpreter.visit(parseTree);

        // Create a test environment and run tests, like cyclic tests
        Environment env = new Environment(ast.getSimulator().getSimulation().getBinaryLength());
        ast.runTests(env);

        // Create the environment and run the simulator
        env = new Environment(ast.getSimulator().getSimulation().getBinaryLength());
        ast.runSimulator(env);
        ast.printOutput(env);
    }
}

// We write an interpreter that implements interface
// "hardwareVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// shardwarey a Integer.
class Interpreter extends AbstractParseTreeVisitor<AST> implements hardwareVisitor<AST> {
    @Override
    public AST visitStart(hardwareParser.StartContext ctx) {
        return new Circuit(visitHardware(ctx.hardware), visitInputs(ctx.inputs), visitOutputs(ctx.outputs), visitLatches(ctx.latches), visitUpdate(ctx.updates), visitSimulate(ctx.simulate));
    }

    public Hardware visitHardware(Token hardware) {
        return new Hardware(hardware.getText());
    }

    public Inputs visitInputs(List<Token> inputs) {
        List<String> inputStrings = new ArrayList<>();
        for (Token t : inputs) {
            inputStrings.add(t.getText());
        }
        return new Inputs(inputStrings);
    }

    public Outputs visitOutputs(List<Token> outputs) {
        List<String> outputStrings = new ArrayList<>();
        for (Token t : outputs) {
            outputStrings.add(t.getText());
        }
        return new Outputs(outputStrings);
    }

    public Latches visitLatches(List<hardwareParser.LatchDeclContext> latches) {
        List<LatchDeclaration> latcheDecls = new ArrayList<>();
        for (hardwareParser.LatchDeclContext t : latches) {
            latcheDecls.add((LatchDeclaration) visit(t));
        }
        return new Latches(latcheDecls);
    }

    public Updates visitUpdate(List<hardwareParser.UpdateDeclContext> updates) {
        List<UpdateDeclaration> updateDecls = new ArrayList<>();
        for (hardwareParser.UpdateDeclContext t : updates) {
            updateDecls.add((UpdateDeclaration) visit(t));
        }
        return new Updates(updateDecls);
    }

    public Simulate visitSimulate(hardwareParser.SimInputContext simulate) {
        return new Simulate((Simulation) visit(simulate));
    }

    @Override
    public AST visitLatchDeclaration(hardwareParser.LatchDeclarationContext ctx) {
        return new LatchDeclaration(ctx.triggerID.getText(), ctx.latchID.getText());
    }

    @Override
    public AST visitUpdateDeclaration(hardwareParser.UpdateDeclarationContext ctx) {
        return new UpdateDeclaration(ctx.id.getText(), (Expr) visit(ctx.exp));
    }

    @Override
    public AST visitIdentifier(hardwareParser.IdentifierContext ctx) {
        return new Identifier(ctx.id.getText());
    }

    @Override
    public AST visitOr(hardwareParser.OrContext ctx) {
        return new Or((Expr) visit(ctx.exp1), (Expr) visit(ctx.exp2));
    }

    @Override
    public AST visitNegation(hardwareParser.NegationContext ctx) {
        return new Negation((Expr) visit(ctx.exp));
    }

    @Override
    public AST visitAnd(hardwareParser.AndContext ctx) {
        return new And((Expr) visit(ctx.exp1), (Expr) visit(ctx.exp2));
    }

    @Override
    public AST visitParentheses(hardwareParser.ParenthesesContext ctx) {
        return new Parentheses((Expr) visit(ctx.exp));
    }

    @Override
    public AST visitSimulation(hardwareParser.SimulationContext ctx) {
        return new Simulation(ctx.id.getText(), ctx.binary.getText());
    }
}

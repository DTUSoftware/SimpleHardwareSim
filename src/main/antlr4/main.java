import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException {

        // we expect exactly one argument: the name of the input file
        if (args.length != 1) {
            System.err.println("\n");
            System.err.println("Hardware Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename = args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        hardwareLexer lex = new hardwareLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        hardwareParser parser = new hardwareParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Expr result = interpreter.visit(parseTree);
        System.out.println("The result is: " + result.eval());
    }
}

// We write an interpreter that implements interface
// "hardwareVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// shardwarey a Integer.

class Interpreter extends AbstractParseTreeVisitor<Expr> implements hardwareVisitor<Expr> {

    @Override
    public Expr visitStart(hardwareParser.StartContext ctx) {
        return null;
    }

    @Override
    public Expr visitLatch(hardwareParser.LatchContext ctx) {
        return null;
    }

    @Override
    public Expr visitUpdate(hardwareParser.UpdateContext ctx) {
        return null;
    }

    @Override
    public Expr visitIdentifier(hardwareParser.IdentifierContext ctx) {
        return null;
    }

    @Override
    public Expr visitOr(hardwareParser.OrContext ctx) {
        return null;
    }

    @Override
    public Expr visitNegation(hardwareParser.NegationContext ctx) {
        return null;
    }

    @Override
    public Expr visitAnd(hardwareParser.AndContext ctx) {
        return null;
    }

    @Override
    public Expr visitParentheses(hardwareParser.ParenthesesContext ctx) {
        return null;
    }

    @Override
    public Expr visitSimulation(hardwareParser.SimulationContext ctx) {
        return null;
    }

    /*
    // From lecture 4.

    public Expr visitStart(hardwareParser.StartContext ctx) {
        return visit(ctx.e);
    }

    public Expr visitMultiplication(hardwareParser.MultiplicationContext ctx) {
        if (ctx.op.getText().equals("*"))
            return new Multiplication(visit(ctx.e1), visit(ctx.e2));
        else
            return new Division(visit(ctx.e1), visit(ctx.e2));
    }

    public Expr visitAddition(hardwareParser.AdditionContext ctx) {
        if (ctx.op.getText().equals("+"))
            return new Addition(visit(ctx.e1), visit(ctx.e2));
        else
            return new Subtraction(visit(ctx.e1), visit(ctx.e2));
    }

    public Expr visitVariable(hardwareParser.VariableContext ctx) {
        return new Variable(ctx.x.getText());
    }

    public Expr visitConstant(hardwareParser.ConstantContext ctx) {
        return new Constant(Integer.parseInt(ctx.c.getText()));
    }

    public Expr visitParentheses(hardwareParser.ParenthesesContext ctx) {
        return visit(ctx.e1);
    }
    */
}

